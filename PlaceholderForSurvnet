### Placeholder.R --- 
#----------------------------------------------------------------------
## Author: Emir S
## Created: Dec 8 2021
## Version: 
## Last-Updated: June 29, 2023
##           By: Emir S
##     Update #: 6
#----------------------------------------------------------------------
## 
### Commentary: Attempting to use the Score function WITH validation (loob)
# for survnet; using pre-written functions

# We have THREE functions:

# first named pk which is the placeholder;

# second named "predictRisk.survnet" which 
# is used to extract risk predictions out of a survnet fit

# and a third named "predictRisk.pk" meant to be called on a placeholder
## 
#----------------------------------------------------------------------

# libraries
library(survnet)
library(tidyverse)
# survnet causes issues otherwise
library(reticulate)
library(riskRegression)

# clenaup
rm(list=ls())
gc()

#----------------------------------------------------------------------
# LOAD AND ADJUST DATA
#----------------------------------------------------------------------

df<-read.csv("./dataderived/SynthData.csv")
# select relevant columns
df<-df%>%select(c("years","death","age","gfr21","pACRc","male","dm","cvd"))

# random sample, for faster run, to check if the codes work
n<-10000
set.seed(42)
df<-df[sample(1:nrow(df),size=n,replace=F),]

# first we need to format the data properly
# code the discrete predictors
disc_predictors<-df[,c("male","dm","cvd")]

# create the dummy variables object using caret
dummy <- caret::dummyVars(" ~ .", data=disc_predictors)

# use the predict function with the dummy object for the data
disc_predictors_encoded <- data.frame(predict(dummy, newdata = disc_predictors))
# rescale continuious variables
cont_predictors<-df[,c("age","gfr21","pACRc")]
cont_predictors_rescaled<-data.frame(lapply(cont_predictors,scale))

# final data
X<-data.frame(disc_predictors_encoded,cont_predictors_rescaled)
Y<-df[,c("years","death")]

# grab maximum prediction horizon by max bootstrapping the time variable
set.seed(42)
boot.max <- bootstrap::bootstrap(df$years,
                      1000, # number of bootstrap samples
                      theta=function(x){max(x)})

# in years
max_horizon<-min(boot.max$thetastar)
max_horizon<-max_horizon%>%floor()
max_horizon

breaks<-1:max_horizon
breaks

#----------------------------------------------------------------------
# FIT SURVNET
#----------------------------------------------------------------------

# small number of epochs, as we dont care that much about the model itself
# right now; we just want to make the Score function work
fit_survnet <- survnet(y = Y, x = X ,verbose=2,breaks=breaks,epochs=20)

#----------------------------------------------------------------------
# SCORE
#----------------------------------------------------------------------

# grab the pre-written functions
source("./functions/predictRiskSurvnet.R")

# this function simply extracts risk predictions from a survnet fit
# for the time input
preds<-predictRisk.survnet(object=fit_survnet,newdata = df,times=c(2,5))
# check
preds%>%head()
preds%>%dim()

# call Score without on these predictions B
x1<-Score(list("survnet"=preds),
          data=df,
          formula=Hist(years,death)~1,times=c(2,5),null.model=F,se.fit=F,metrics="Brier",
          plots = "Calibration")
# calibrates fine
plotCalibration(x1,times=2,cens.method="local",xlim=c(0,0.6),ylim=c(0,0.6))

# Score WITH B, this doesn't run...
# Error in FUN(X[[i]], ...) : model Survnet does not have a call argument.
x2<-Score(list("Survnet"=fit_survnet),
          data=df,
          formula=Hist(years,death)~1,
          times=breaks,cause=1,split.method="loob",B=10,seed=42,
          se.fit = F,conf.int=FALSE,M=round(.632*NROW(df)),
          plots="Calib",null.model=F,metrics="Brier")

# placeholder
ph<-pk(NULL)
# this is the second function, called on the placeholder and the fit object
ph_risk<-predictRisk.pk(object=ph,fit.object=fit_survnet,newdata=df,times=c(2,5))
# check
ph_risk%>%head()
ph_risk%>%dim()

# make sure they match with the predictions earlier
head(cbind(preds,ph_risk))
tail(cbind(preds,ph_risk))

# This runs fine...
x2<-Score(list("Survnet"=ph),
          data=df,
          formula=Hist(years,death)~1,
          times=breaks,cause=1,split.method="loob",B=50,seed=42,
          se.fit = F,conf.int=FALSE,M=round(.632*NROW(df)),
          plots="Calib",null.model=F,metrics="Brier")

# Calibrates decently as before too
plotCalibration(x2,times=2,cens.method="local",xlim=c(0,0.6),ylim=c(0,0.6))
plotCalibration(x2,times=2,cens.method="local",bars=T)

